#include <iostream>
#include <cstdio>
#include <cstring>
#include <fstream>
#include <iomanip>
using namespace std;

#define OK true
#define ERROR false
#define Status bool
//定义结构体数据类型
typedef struct
{
    char no[20];
    char name[50];
    float price;
}Book;
//定义一个单链表
typedef struct LNode
{
    Book data;
    struct LNode* next;

}LNode, *LinkList;
string head_1, head_2, head_3;
int length;
//单链表初始化
Status InitList(LinkList &L)
{
    L = new LNode;
    L->next=NULL;
    return true;
}
//前插法创建单链表
void CreateList_H(LinkList &L, int n) 
{   
	LinkList p;
	L = new LNode;
	L->next = NULL; 
	length = 0;
    //文件操作
	fstream file;
	file.open("D:\\Desktop\\Experiment\\Book.txt");
	if (!file) {
		cout << "未找到相关文件，无法打开！" << endl;
		exit(ERROR);
	}
	file >> head_1 >> head_2 >> head_3;
	while (!file.eof()) {
		p = new LNode; 
		file >> p->data.no >> p->data.name >> p->data.price; 
		p->next = L->next;
		L->next = p; 
		length++;
	}
	file.close();
}
//取值操作，返回L中第i个数据元素的值
int GetElem(LinkList& L, int i, Book& e)
{
    LinkList p = L->next;
    int j = 1;
    while (p && j < i)
    {
        p = p->next;
        ++j;
    }
    if (!p || j > i) return false;
    e = p->data;
    return 0;
}

//查找操作
LNode *LocateElem(LinkList L, int e) 
{  
	LinkList p;
	p = L->next;
	while (p && p->data.price != e)
		p = p->next;
	return p; 
}
//插入操作
Status ListInsert(LinkList& L, int i, Book e)
{
    LinkList p = L;
    int j = 0;
    while (p && j < i - 1)
    {
        p = p->next;
        ++j;
    }
    if (!p || j > i - 1) return false;   
    LinkList s = new LNode;     
    s->next = p->next;
    p->next = s;
    return true;
}
//删除操作,并保存删除结点的数据
Status ListDelete(LinkList &L, int i) 
{   
	LinkList p, q;
	int j;
	p = L;
	j = 0;
	while ((p->next) && (j < i - 1)) 
	{
		p = p->next;
		++j;
	}
	if (!(p->next) || (j > i - 1))
		return ERROR; 
	q = p->next; 
	p->next = q->next; 
	delete q; 
	--length;
	return OK;
} 
//按格式输出函数
void ShowList(LinkList& L)
{
    LinkList p;
    p = L->next;
    if(p==NULL)
    {
        cout<<"这是一个空表"<<endl;
    }
    while (p)
    {
        cout << left << setw(15) << p->data.no << "\t" << left << setw(
						50) << p->data.name << "\t" << left << setw(5)
						<< p->data.price << endl;
        p = p->next;
    }

}
//求单链表的表长
int ListLength(LinkList L)
{
    LinkList p;
    p = L->next;
    int i = 0;
    while (p)
    {
        i++;
        p = p->next;
    }
    return i;

}
int main()
{
    int a, n, choose;
	double price;
	Book e;
	LinkList L, p;
    cout<<"欢迎来到图书管理系统！"<<endl;
    cout << "1. 建立\n";
	cout << "2. 输入\n";
	cout << "3. 取值\n";
	cout << "4. 查找\n";
	cout << "5. 插入\n";
	cout << "6. 删除\n";
	cout << "7. 输出\n";
	cout << "0. 退出\n\n";
    choose = -1;
	while (choose != 0) 
    {
		cout << "请选择:";
		cin >> choose;
		switch (choose) 
        {
		case 1: //建立一个单链表
			if (InitList(L))
				cout << "成功建立链表!\n\n";
			break;
		case 2: //使用后插法创建单链表
			CreateList_H(L, length);
			cout << "输入 book.txt 信息完毕\n\n";
            ShowList(L);
			break;
		case 3: //单链表的按序号取值
			cout << "请输入一个位置用来取值:";
			cin >> a;
			if (GetElem(L, a, e)) 
            {
				cout << "查找成功\n";
				cout << "第" << a << "本图书的信息是：\n";
                ShowList(L);
			} else
				cout << "查找失败\n\n";
			break;
		case 4: //单链表的按值查找
			cout << "请输入所要查找价格:";
			cin >> price;
			if (LocateElem(L, price) != NULL) 
            {
				cout << "查找成功\n";
				cout << "该价格对应的书名为：" << LocateElem(L, price)->data.name
						<< endl << endl;
			} else
				cout << "查找失败! 定价" << price << " 没有找到\n\n";
			break;
		case 5: //单链表的插入
			cout << "请输入插入的位置和书的信息，包括：编号 书名 价格（用空格隔开）:";
			cin >> a;
			cin >> e.no >> e.name >> e.price;
			if (ListInsert(L, a, e))
				cout << "插入成功.\n\n";
			else
				cout << "插入失败!\n\n";
			break;
		case 6: //单链表的删除
			cout << "请输入所要删除的书籍的位置:";
			cin >> a;
			if (ListDelete(L, a))
				cout << "删除成功!\n\n";
			else
				cout << "删除失败!\n\n";
			break;
		case 7: //单链表的输出
			cout << "当前图书系统信息（链表）读出:\n";
			p = L->next;
			while (p) 
            {
                ShowList(L);
                break;
            }
        }
        
    }
    cout << "-----------------------------" << endl;
    cout << "感谢使用本系统，欢迎下次再见!" << endl;
    return 0;
}
